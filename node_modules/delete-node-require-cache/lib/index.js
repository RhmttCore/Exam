'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var path = require('path');
var validateNpm = require('validate-npm-package-name');
var fsExtra = require('fs-extra');
var crequire = require('crequire');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var validateNpm__default = /*#__PURE__*/_interopDefaultLegacy(validateNpm);
var crequire__default = /*#__PURE__*/_interopDefaultLegacy(crequire);

const JSFileContentCacheMap = {};

const getJSFullPath = filePath => {
  const ext = path.extname(filePath);
  const jsFile = ext === '.js' ? filePath : `${filePath}.js`;
  return jsFile;
};

const getJSDepPath = filePath => {
  const ext = path.extname(filePath);
  return ext === '.js' ? filePath.slice(0, filePath.length - ext.length) : filePath;
};

const delRequireCache = rootFile => {
  const getAllDependJS = filePath => {
    if (!fsExtra.existsSync(filePath)) {
      return [];
    }

    const jsFile = getJSFullPath(filePath);
    const jsCont = fsExtra.readFileSync(jsFile) + '';
    const result = [jsFile];
    const cacheInfo = JSFileContentCacheMap[jsFile] || {};

    if (cacheInfo.content === jsCont && Array.isArray(cacheInfo.depends)) {
      cacheInfo.depends.forEach(depIt => {
        Array.prototype.push.apply(result, getAllDependJS(depIt) || []);
      });
      return result;
    }

    const depends = crequire__default["default"](jsCont);
    const dependFilePaths = [];
    depends.forEach(it => {
      var _a;

      const {
        path: path$1
      } = it || {};

      if (((_a = validateNpm__default["default"](path$1)) === null || _a === void 0 ? void 0 : _a.validForNewPackages) || !path$1) {
        return;
      }

      const itFile = getJSFullPath(path.resolve(path.dirname(jsFile), path$1));
      dependFilePaths.push(itFile);

      if (result.includes(itFile)) {
        return;
      }

      Array.prototype.push.apply(result, getAllDependJS(itFile) || []);
    });
    const fileInfo = {
      content: jsCont,
      depends: dependFilePaths,
      deepDepends: result
    };
    JSFileContentCacheMap[jsFile] = fileInfo;
    return result;
  };

  const allDepJS = getAllDependJS(rootFile);
  const delJSFiles = [];

  for (const itJS of allDepJS) {
    const itJSDepPath = getJSDepPath(itJS);
    delete require.cache[require.resolve(itJSDepPath)];
    delJSFiles.push(itJSDepPath);
  }

  return delJSFiles;
};

exports.JSFileContentCacheMap = JSFileContentCacheMap;
exports.delRequireCache = delRequireCache;
